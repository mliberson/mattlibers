Matthew Liberson

2723667394

mliberso@usc.edu

readme part1

Summary:
This code begins by taking in inputs from the user and separating it into integers. It then feeds the integers into the func function, which calculated dz by multiplying each number to itself and summing each result to find z. It then uses z to calcuate the error with a function that creates bounds by moding the randomly generated number by the maximum number. The result is then added to z to create the output, dz. 

Instructions:
The code can be compiled normally using gcc. Then, it can be run in the command line with ./blackbox [x] [y] [d], where x,y,d are numbers of your choice

Sources:
for line 10, I used a mod method to creates bounds for the random function, the idea for this came from https://www.programmingsimplified.com/c-program-generate-random-numbers

I formatted the comand line arguments on line 29 with help from the source https://www.geeksforgeeks.org/command-line-arguments-in-c-cpp/

readme part2

Summary:
This code begins by opening the results.txt file so that it can write into it. It then goes into a for loop that runs 10000 and each time generates 3 new random numbers as specified by the problem statement. The program then uses the check_output subprocess to obtain the output of the blackbox function given the randomly generated numbers. The program then computes z on its own and finds the error from blackbox by finding the absolute difference between the blackbox value and the computed value. This difference is then written into results.txt. Finally, the file is closed and the program ends. 

Instructions:
The code can be compiled with python3 2723667394tester.py.

Sources:
for the subprocess function, I was helped by an example from https://kite.com/python/docs/subprocess.check_output

